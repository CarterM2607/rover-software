{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/derek/Documents/roverTeam/rover-software/react-rover-ui/src/components/MapView.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvent } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\n\nrequire('eventemitter2');\n\nvar ROSLIB = require('roslib');\n\nvar ros = new ROSLIB.Ros({\n  url: 'ws://localhost:9090'\n});\nros.on('connection', function () {\n  console.log('Connected to websocket server.');\n});\nros.on('error', function (error) {\n  console.log('Error connecting to websocket server: ', error);\n});\nros.on('close', function () {\n  console.log('Connection to websocket server closed.');\n});\nvar listener = new ROSLIB.Topic({\n  ros: ros,\n  name: '/listener',\n  messageType: 'std_msgs/String'\n});\nlistener.subscribe(function (message) {\n  console.log('Received message: ' + message.data);\n});\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconAnchor: [12, 40],\n  shadowAnchor: [12, 40]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nfunction ClickHandler(props) {\n  _s();\n\n  useMapEvent({\n    click(e) {\n      if (props.userMode === \"view\") {\n        return;\n      }\n\n      props.addWaypoint(e.latlng);\n    }\n\n  });\n  return null;\n}\n\n_s(ClickHandler, \"UJFMGIyDtKpxgOUCFJT9iLs+CFY=\", false, function () {\n  return [useMapEvent];\n});\n\n_c = ClickHandler;\nexport class MapView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      waypoints: [],\n      paths: []\n    };\n    this.addWaypoint = this.addWaypoint.bind(this);\n    this.drawPaths = this.drawPaths.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      onClick: this.handleClick,\n      center: this.props.defaultCenter,\n      zoom: 14,\n      scrollWheelZoom: false,\n      style: {\n        height: \"700px\",\n        width: \"800px\",\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ROS Testing: [Value]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ClickHandler, {\n        userMode: this.props.userMode,\n        addWaypoint: this.addWaypoint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: this.props.mapTileDirectory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), this.state.waypoints.map((position, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: position,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Waypoint \", idx + 1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), \"Lat: \", position.lat, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), \"Lng: \", position.lng]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, `waypoint-${idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)), this.state.paths.map((positions, idx) => /*#__PURE__*/_jsxDEV(Polyline, {\n        pathOptions: {\n          color: \"red\"\n        },\n        positions: positions\n      }, `path-${idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n  addWaypoint(position) {\n    const newWaypoints = this.state.waypoints;\n    newWaypoints.push(position);\n    this.setState({\n      waypoints: newWaypoints\n    });\n    this.drawPaths();\n    var currentLocation = new ROSLIB.Message(\"Hello There\");\n    listener.publish(currentLocation);\n    console.log(\"ROS message published\");\n  }\n\n  drawPaths() {\n    let newPaths;\n\n    if (this.state.waypoints.length < 2) {\n      return;\n    }\n\n    for (var i = 1; i < this.state.waypoints.length; i++) {\n      let pathToAdd = [this.state.waypoints[i], this.state.waypoints[i - 1]];\n      newPaths = this.state.paths;\n      newPaths.push(pathToAdd);\n    }\n\n    this.setState({\n      paths: newPaths\n    });\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClickHandler\");","map":{"version":3,"sources":["/home/derek/Documents/roverTeam/rover-software/react-rover-ui/src/components/MapView.js"],"names":["React","Component","MapContainer","TileLayer","Marker","Popup","Polyline","useMapEvent","L","icon","iconShadow","require","ROSLIB","ros","Ros","url","on","console","log","error","listener","Topic","name","messageType","subscribe","message","data","DefaultIcon","iconUrl","shadowUrl","iconAnchor","shadowAnchor","prototype","options","ClickHandler","props","click","e","userMode","addWaypoint","latlng","MapView","constructor","state","waypoints","paths","bind","drawPaths","render","handleClick","defaultCenter","height","width","display","mapTileDirectory","map","position","idx","lat","lng","positions","color","newWaypoints","push","setState","currentLocation","Message","publish","newPaths","length","i","pathToAdd"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  Polyline,\n  useMapEvent,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\n\nrequire('eventemitter2');\nvar ROSLIB = require('roslib');\n\nvar ros = new ROSLIB.Ros({\n  url: 'ws://localhost:9090'\n});\n\nros.on('connection', function() {\nconsole.log('Connected to websocket server.');\n});\n\nros.on('error', function(error) {\nconsole.log('Error connecting to websocket server: ', error);\n});\n\nros.on('close', function() {\nconsole.log('Connection to websocket server closed.');\n});\n\nvar listener = new ROSLIB.Topic({\n  ros : ros,\n  name : '/listener',\n  messageType : 'std_msgs/String'\n});\n\nlistener.subscribe(function(message) {\n  console.log('Received message: ' + message.data);\n})\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconAnchor: [12, 40],\n  shadowAnchor: [12, 40],\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nfunction ClickHandler(props) {\n  useMapEvent({\n    click(e) {\n      if (props.userMode === \"view\") {\n        return;\n      }\n      props.addWaypoint(e.latlng);\n    },\n  });\n  return null;\n}\n\nexport class MapView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      waypoints: [],\n      paths: [],\n    };\n    this.addWaypoint = this.addWaypoint.bind(this);\n    this.drawPaths = this.drawPaths.bind(this);\n  }\n  render() {\n    return (\n      <MapContainer\n        onClick={this.handleClick}\n        center={this.props.defaultCenter}\n        zoom={14}\n        scrollWheelZoom={false}\n        style={{ height: \"700px\", width: \"800px\", display: \"inline-block\" }}\n      >\n        <h1>ROS Testing: [Value]</h1>\n        <ClickHandler\n          userMode={this.props.userMode}\n          addWaypoint={this.addWaypoint}\n        />\n        <TileLayer url={this.props.mapTileDirectory} />\n        {this.state.waypoints.map((position, idx) => (\n          <Marker key={`waypoint-${idx}`} position={position}>\n            <Popup>\n              <span>\n                Waypoint {idx + 1}\n                <br />\n                Lat: {position.lat}\n                <br />\n                Lng: {position.lng}\n              </span>\n            </Popup>\n          </Marker>\n        ))}\n        {this.state.paths.map((positions, idx) => (\n          <Polyline\n            key={`path-${idx}`}\n            pathOptions={{ color: \"red\" }}\n            positions={positions}\n          />\n        ))}\n      </MapContainer>\n    );\n  }\n  addWaypoint(position) {\n    const newWaypoints = this.state.waypoints;\n    newWaypoints.push(position);\n    this.setState({ waypoints: newWaypoints });\n    this.drawPaths();\n    var currentLocation = new ROSLIB.Message(\"Hello There\");\n    listener.publish(currentLocation);\n    console.log(\"ROS message published\");\n  }\n  drawPaths() {\n    let newPaths;\n    if (this.state.waypoints.length < 2) {\n      return;\n    }\n    for (var i = 1; i < this.state.waypoints.length; i++) {\n      let pathToAdd = [this.state.waypoints[i], this.state.waypoints[i - 1]];\n      newPaths = this.state.paths;\n      newPaths.push(pathToAdd);\n    }\n    this.setState({ paths: newPaths });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}